# BOJ-2688.py
# 줄어들지 않아

p = [0]
p.append([1] * 10) 
for n in range(2, 65):
    p.append([0] * 10)
    for i in range(0, 10):
        p[n][i] = sum(p[n-1][i:10])

    #print(n, sum(p[n]), p[n])

T = int(input())
for _ in range(T):
    n = int(input())
    print(sum(p[n]))

# p[n][i] : 줄어들지 않는 n자리수에서 마지막 자리가 i 인 경우의 개수
# 1 10 [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
# 2 55 [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
# 3 220 [55, 45, 36, 28, 21, 15, 10, 6, 3, 1]
# ---
# n = 1 -> 0 ~ 9,  p[1] = 10

# n = 2 -> i*10+j i=[0 ~ 9], j=[i ~ 9] 
# p[2] = sum(p[1] ... 1) = 55 = sum(0~10)
# 00, 01, 02, 03 ...09 (10) # 11, 12, 13 ... 19 (9) # 99 (1)

# n = 3 -> i*100+j*10+k // i = [0 ~ 9], j = [i ~ 9], k = [j ~ 9]
# 000, 001, 002, 003 ... 009 (10)
# 011, 012, 013, ... 019 (9) --> 099 (1) => p[2] // sum(0~10)
# 111, 112, 113, ... 119 (9) --> 199 (1) => sum(0~9)
# p[3] = sum(0~10) + sum(0~9) + sum(0~1)
#      = 55 + 45 + 36 + ... = 220
#      = p[2] + p[2]-9 + p[2]-8 ... = 

# n = 4 -> 715
# 0000, 0001, 0002, ... 0009 (10) 
# 0011, 0012, 0013, ... 0019 (9) // 0099 (1) => sum(0~10)
# p[4] = sum(0~10) ~ sum(0~1) + sum(0~9) ~ sum(0~1)
#      = p[3] + p[3] - 55 + p



# p1 = [1] * 10
# print(1, sum(p1), p1)

# p2 = [0] * 10
# for i in range(0, 10):
#     p2[i] = sum(p1[i:10]) #sum(p1) - i
# print(2, sum(p2), p2)

# p3 = [0] * 10
# for i in range(0, 10):
#     p3[i] = sum(p2[i:10]) 
# print(3, sum(p3), p3)

# p4 = [0] * 10
# for i in range(0, 10):
#     p4[i] = sum(p3[i:10]) 
# print(4, sum(p4), p4)

